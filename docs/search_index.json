[["index.html", "Weather App Project SoSe22 Chapter 1 Welcome!", " Weather App Project SoSe22 TechAcademy e.V. Summer Term 2022 Chapter 1 Welcome! You’ve just gotten accepted into our web-development program for the summer term of 2022 and want to know what’s it all about actually? Maybe you signed up, because of our awesome marketing’s team TikTok campaign, or you may already have an app idea in your head. Whatever the reason may be, we can assure you of one thing: If you follow through with the semester, you will have gained an awesome skill to have and a solid foundation for further programming adventures. We will help and guide you along the way to the best of our abilities and hope we can share some of that fascination that got us into programming with you! Learning to code is incredibly rewarding but can also be difficult and frustrating. Like any skill worth knowing, it takes time to acquire, and it can’t be learned in a weekend or even a month. With that said, anyone can learn how to program as long as they are willing to put in the time and effort. So before we get into the meat and get our hands dirty, let’s go over how this semester is structured. Over the following months, there will be a total of four Coding Meetups, spaced out evenly where you will have the ability to meet your peers, work together on our application and ask questions to your mentors. But what about the rest of the semester? As mentioned previously any skill takes time. So you will have to do work on your own as well. For self-study purposes this guideline only serves as a rough draft. However, we have partnered up with Udemy and thus you have free access to the ultimate web-development bootcamp course. Everything you will learn there, you can later use within your own project and solidify your knowledge. In your project, you can work in groups of up to four team members. You can choose your teammates independently and we will not interfere with your arrangements. It is however beneficial, that all group members have approximately the same level of knowledge. We explicitly encourage you to collaborate with students from different university faculties. This not only allows you to get to know people from other faculties, but may also give you a whole new perspective on the project and tasks. When submitting your project please note: for a certificate, each person must submit the project individually. However, hand-ins may be similar within your group. You can get more information at our first Coding Meetup on May 18, 2022. Every semester, the Product Development Team at TechAcademy thinks hard about a new project that is suited for you to get into web-development. This semester we decided to let you create a weather-app. You’ve seen them countless times on various websites and may use your favourite one every day to check if you have to put on a raincoat or sunscreen. But how does the data get to the website? How does it update with every refresh and how can one make look that all appealing to an audience? These are all questions that we will tackle in this semester. We hope you are as hyped up about that as we are! The model weather-app that you will see later on in the course and this associated project guide was developed and written entirely from scratch by Sebastian Hönig and Burak Onat from TechAcademy’s Web Development Team. "],["introduction.html", "Chapter 2 Introduction 2.1 What’s web development?", " Chapter 2 Introduction 2.1 What’s web development? "],["tools.html", "Chapter 3 Tools 3.1 IDE 3.2 API 3.3 Udemy", " Chapter 3 Tools 3.1 IDE Now that you know the basics of Web Development you are ready to go and write some code! But there is still a question left to answer. Where do programmers write their code. Surely not in a Word document or the default text editor of their operating system. Developers use an Integrated Development Environment (IDE) to write code because it comes with a lot of handy features that help developers code faster and cleaner. The most IDEs have a lot of features that you probably wont even need during this course but once you get used to the following advantages you don’t want to code without them anymore. 1. Graphical User Interface The GUI of an IDE has been designed in a way that allows you to see your file directory, editor, terminal and some IDEs even have an interface to download packages and even for version control. 2. Autocomplete If the IDE knows your programming language it can anticipate what you are going to type next and it will pop up some autocompletion suggestions. 3. Syntax Highlighting The IDE can also provide some visual aid to your syntax based on your programming language, so that special words have a different color, opening and closing parentheses will have the same color. This may seem distracting at the beginning but once you get used to it, it will help you code faster. 4. Debugging No one can avoid to write code without bugs. IDEs know that and they are always in search of your mistakes such as typos, syntax errors and even reference errors. The cool thing is that it will show you the error even before you run your code. That way you don’t have to wait for your code to run and break. Some popular IDEs for Web Development are Visual Studio Code, Vim and Sublime Text 3. We recommend you to use Visual Studio Code as it is also used in the Udemy Course you will be learning with. For this course and your project you can also use the online code editor CodeSandbox. This IDE is based on the same platform as Visual Studio Code, but offers some additional functionalities. You can create teams that can not only access the same files but you can also have a live coding session together in the same file. To sign up you need a free account, which you can create in a matter of seconds. 3.2 API This semester the web development course will build an interactive weather application but more on the project will come later. For now let’s answer the question: Where does our weather data come from? Obviously we do not keep track of the weather data. There are plenty of APIs that provide such a service. But what exactly is an API? An API (Application Programming Interface) allows programmers to get some data from somewhere else and do whatever you want to do with it. For example you could display such data on your web page. These API services are often expensive but there are some very cool APIs that allow us to do some stuff for free. How do we get the data? Every API works differently but if you understand one API you probably will also understand every other API very easily. We have to write some code that asks the API what data we want? In JavaScript you can use the fetch() function to request data from somewhere. How do we use the data? After you fetched the data from an API you have to change the format of the data into an JavaScript object so that you can work with those information. Some of you might ask in which form the data comes to us and that would be very good question. Most API Services use JSON (JavaScript Object Notation) to send data. You can read more about it in the additional resources part but for now you should know that it is a text-based format for representing structured data based on JavaScript object syntax. It is commonly used for transmitting data in web applications (e.g., sending some data from the server to the client). For your project we recommend you to use the OpenWeather API which has a free tier that you can use after creating a free account. If you read their documentation page you will see many different API options you can choose from. But don’t worry! Once you know how one of them works you will get the hang of it. You can start with the „Current Weather Data API Call“ and inspect the data structure. Note which data you will need and try to extract it from there. You can use a Chrome Extension called JSON Formatter to have a clear look at the data. You can try this API Call in the beginning 3.3 Udemy For this course you will be learning with the The Web Development Bootcamp 2022 on Udemy. Even if you realy want to learn JavaScript very early, we strongly suggest beginners to follow the provided order of the courses as their contents build on each other. You won’t need to watch the whole course to finish the project. Because this will be a simple frontend project and the second part of the Udemy course is all about backend. During the course there are also a lot of sections in which you will build things. You can skip those sections if you like to but if you have the time try them on your own. You learn the most by building stuff and apply what you have learned. In the table below you can find the sections you need to watch to complete your project: Section Name Duration (h) 1. Course Orientation 0.5 2. An Introduction to Web Development 0.75 3. HTML: The Essentials 1 4. HTML: Next Steps &amp; Semantics 1 5. HTML: Forms &amp; Tables 1 6. CSS: The Very Basics 1 7. CSS: The World of CSS Selectors 1.25 8. The CSS Box Model 1 9. Responsive CSS &amp; Flexbox 1.25 10. JavaScript Basics! 1 11. JavaScript String and More 0.75 12. JavaScript Decision Making 1.25 13. JavaScript Arrays 1 14. JavaScript Object Literals 0.5 15. JavaScript Repeating Stuff With Loops 1.5 16. NEW: Introducing Functions 0.5 17. Callbacks &amp; Array Methods 1.5 18. Introducing The World Of The DOM 1.75 19. The Missing Piece: DOM Events 1.75 20. Async JavaScript: Oh Boy! 1.5 21. AJAX and API’s 1.5 "],["project.html", "Chapter 4 Project 4.1 Project introduction 4.2 Your assingment(s)", " Chapter 4 Project 4.1 Project introduction As you know by now this semester you will work on a weather app. This chapter will contain many information about the project. You can come back here anytime to watch your progress and also get some ideas how you should start and go on with the features the weather app will have. We have build an example weather app which can serve as an orientation but you can style your app as you wish. Our sample weather app But don’t you think an weather app is just a panel that shows us the current weather of a city. You can add a lot of small features that can make a big user experience difference. Some of these features will be mandatory for your project and some of them are just ideas you can incorporate in your app. Mandatory Features Other Feature Ideas Search bar for city Sidebar with last searched cities Forecast bar for daily weather Weather for current user location Toggle functionality for forecast and/or last searches 4.2 Your assingment(s) You can use this chapter as a guide to your project. We won’t spoil any code for you but instead give you some ideas and hints for the problems that you might have while building the end product. Step 1: The Idea Familiarize yourself with the project idea. Search for other weather apps in the web and get a feeling how it should work. Think about what you would do differently or how it could be improved. Make a wireframe sketch to plan your further development. A rough drawing is enough for the moment, but it should already include all the elements and functionality. Make your own sketch first before pooling any ideas with your team and agreeing on a concept. Step 2: The Plan Use your plan from Step 1 build the weather app with “hardcoded” city. You can fill in all the gaps with made up information. This step will help you to layout all the information that will later come from the API. Style the elements on your app with some CSS. But don’t go into the details for now. You never know what will eventually change and it may cost you too much time. Step 3: The Testing Now it is time to get some real data. You can go over this section again to read about the API you should be using. We recommend you to get familiar with the API in the console before you include into your script file. Note yourself how the information is structured and which information you wish to display on your final project. Step 4: The Implementation If you feel ready with the API start to write some code into your script file. But do it in small steps so that you know where the problem is if something goes wrong. Always log to the console to check if everything works as planned. But don’t worry if it doesn’t work in the beginning. Look in the console for error messages and google them. There is for sure someone that had the same problem and already found an answer online. Step 5: The End Go over the project and test everything out. You can give the project to some friend so that they can use it and give you some feedback. If they find some bugs note them and try to fix them. And of course, don’t forget to style your project. "],["additional-resources.html", "Chapter 5 Additional Resources 5.1 Git and Github 5.2 JSON 5.3 Font Awesome 5.4 Frameworks and React.js 5.5 Node.js", " Chapter 5 Additional Resources 5.1 Git and Github 5.2 JSON 5.3 Font Awesome 5.4 Frameworks and React.js 5.5 Node.js "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
