[["index.html", "Weather App Project SoSe22 Chapter 1 Introduction", " Weather App Project SoSe22 TechAcademy e.V. Summer Term 2022 Chapter 1 Introduction Youve just gotten accepted into our web-development program for the summer term of 2022 and want to know whats it all about actually? Maybe you signed up, because of our awesome marketings team TikTok campaign, or you may already have an app idea in your head. Whatever the reason may be, we can assure you of one thing: If you follow through with the semester, you will have gained an awesome skill to have and a solid foundation for further programming adventures. We will help and guide you along the way to the best of our abilities and hope we can share some of that fascination that got us into programming with you! Learning to code is incredibly rewarding but can also be difficult and frustrating. Like any skill worth knowing, it takes time to acquire, and it cant be learned in a weekend or even a month. With that said, anyone can learn how to program as long as they are willing to put in the time and effort. So before we get into the meat and get our hands dirty, lets go over how this semester is structured. Over the following months, there will be a total of four Coding Meetups, spaced out evenly where you will have the ability to meet your peers, work together on our application and ask questions to your mentors. But what about the rest of the semester? As mentioned previously any skill takes time. So you will have to do work on your own as well. For self-study purposes this guideline only serves as a rough draft. However, we have partnered up with Udemy and thus you have free access to the ultimate web-development bootcamp course. Everything you will learn there, you can later use within your own project and solidify your knowledge. In your project, you can work in groups of up to four team members. You can choose your teammates independently and we will not interfere with your arrangements. It is however beneficial, that all group members have approximately the same level of knowledge. We explicitly encourage you to collaborate with students from different university faculties. This not only allows you to get to know people from other faculties, but may also give you a whole new perspective on the project and tasks. When submitting your project please note: for a certificate, each person must submit the project individually. However, hand-ins may be similar within your group. You can get more information at our first Coding Meetup on May 18, 2022. Every semester, the Product Development Team at TechAcademy thinks hard about a new project that is suited for you to get into web-development. This semester we decided to let you create a weather-app. Youve seen them countless times on various websites and may use your favourite one every day to check if you have to put on a raincoat or sunscreen. But how does the data get to the website? How does it update with every refresh and how can one make look that all appealing to an audience? These are all questions that we will tackle in this semester. We hope you are as hyped up about that as we are! The model weather-app that you will see later on in the course and this associated project guide was developed and written entirely from scratch by Sebastian HÃ¶nig and Burak Onat from TechAcademys Web Development Team. "],["whats-web-development.html", "Chapter 2 Whats web development? 2.1 HTML 2.2 CSS 2.3 JavaScript", " Chapter 2 Whats web development? In short, web developers build and maintain websites. Web developers often work for clients who are trying to get their product or service onto the web. The work is typically very project focused and involves collaborating with a team that helps to coordinate the clients needs into the end product. The work could involve front-end, back-end, or full-stack web development. In our course we will focus on front end development. The front end is what you see when you open any website in your browser. At as basic level, front-end developers use HTML, CSS and JavaScript. 2.1 HTML HTML, short for Hypertext Markup Language, is the raw data that a webpage is built out of. It allows you to structure the website through sections, paragraphs, headings and lets you create text, links, cards, lists, and buttons. The structure of a html file is very simple. Almost all elements are just pieces of content wrapped in opening and closing HTML tags. For example, you would write the title of a webpage like so: &lt;title&gt;Document&lt;/title&gt; And while the current version of HTML (HTML5) 140 different tags contains, most webpages are made just out of a fraction of these. Youve already seen the title tag, lets quicky take a look at some more of those, as these are also the ones that you will most likely be using during your project. - &lt;html&gt;: Must enclose the entire rest of the code - &lt;head&gt;: Contains the title, the link to the css (styling) file and various other information - &lt;body&gt;: Contains the contents of a website - &lt;p&gt;: Paragraph, simple text belongs here - &lt;hX&gt;: X is a number between 1 (large heading) and 6 (small heading) - &lt;div&gt;: Structure that groups content inside - &lt;ul&gt;: Unordered list containint list items &lt;li&gt; - &lt;a&gt;: Link tag, used to link from one website to the next - &lt;img&gt;: An image in an HTML page - &lt;form&gt;: To create an HTML form for user input - &lt;table&gt;: Defines a table, containing rows &lt;tr&gt; and columns &lt;td&gt; - &lt;button&gt;: Create a clickable button Now that you know the majority of the relevant tags the only question left to answer is where do we put them? For that it is relevant that all HTML documents have the same boilerplate-like structure that needs to be in place before anything useful can be done! The boilerplate looks something like this and is often easily accessible with a shortcut (so you dont have to type it all out everytime you create a new file): &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; All of the content, that appears on a webpage is written between the &lt;body&gt; tags. So.. we know the basic structure and some HTML tags, but how and where do we write HTML Code? The answer is straight forward: We can write HTML Code anywhere! Even in a simple plain editor, as long as we save the code as .html we can view the results in the web-browser. But dont worry, there are more handy choices that we will look at in the !!TODO:LINK TO SECTION!!. Please note here, that we should always save the homepage of our websites as index.html. This is because web servers will by default look for an index.html page when users land on our websites - and not having one will cause big problems. 2.2 CSS Now we have a structure for the contents of a website, but to be frank: that looks horrible. The next step is to make that structure look good with some style, which is exactly what CSS, short for Cascading Style Sheets, is for. Using CSS, you can control the color of the text, the style of fonts, the spacing between paragraphs, how columns are sized and laid out, what background images or colors are used, layout designs, variations in display for different devices and screen sizes as well as a variety of other effects. The CSS Syntax is as straight forward as it was the case with HTML. It is a rule-based syntax and every rule is made up of a selector and a semi-colon separated list of property:value pairs. Lets go over how selectors work so you can get a feel for fit. If the goal is to style all elements of the same type in a certain way, simply reference the tag. h1 { color: black; } h1 { color: black; } If you want to style multiple elements, you use dot notation and add a class to the element in HTML. .bold-text { font-weight: bold } .bold-text { font-weight: bold } If you only want to style one element, you use the hashtag notation and add an id to the element in HTML. #header { font-size: x-large; } #header { font-size: x-large; } Now, lets check out the properties that you will encounter most often. width: specifies the width of the elements content area height: specifies the height of the elements content area color: defines the color of text, can be named, rgb(a) or hex value background-color: sets the background color border: specifies what kind of border to display outline: similar to border, but within the elements box font-size: Sets size of font (small, large..) font-weight: Sets weight of font (bold, italic..) font-family: Sets font style (arial, times) margin: distance from the border of one element to the border of the other element padding: distance from border to the content of the element CSS is based on the so-called box model: every element is a box. The content inside the element is a box, surrounded by the padding, surrounded by the border and surrounded by the margin. This schematic can also be found in every modern web browser. Simply open your favorite website in a new window, right click and then select inspect. This will open the developer tools and allow you to check out the content of a page. With these developer tools, you can also alter the content of a website directly in the browser! However beware, these changes will not be saved and a reload will get rid of them. Great, now you know alot about CSS, but where do we actually write it? There are several ways that youll come across, but the most common way is to create a new file (by convention saved as style.css) and put all our css code there. Now we only have to link our created file in the head section of the html page and we are all set. &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt; &lt;/head&gt; &lt;body&gt;...&lt;/body&gt; &lt;/html&gt; 2.3 JavaScript "],["tools.html", "Chapter 3 Tools 3.1 IDE 3.2 API 3.3 Udemy", " Chapter 3 Tools 3.1 IDE Test 3.2 API 3.3 Udemy "],["project.html", "Chapter 4 Project 4.1 Project introduction 4.2 Your assingment(s)", " Chapter 4 Project 4.1 Project introduction 4.2 Your assingment(s) "],["additional-resources.html", "Chapter 5 Additional Resources 5.1 Git and Github 5.2 JSON 5.3 Font Awesome 5.4 Frameworks and React.js 5.5 Node.js", " Chapter 5 Additional Resources 5.1 Git and Github 5.2 JSON 5.3 Font Awesome 5.4 Frameworks and React.js 5.5 Node.js "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
